{"ast":null,"code":"var _jsxFileName = \"C:\\\\GongSite\\\\frontend\\\\src\\\\Page\\\\Posts.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Posts = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [editId, setEditId] = useState(null);\n  useEffect(() => {\n    fetch('/api/posts').then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => setPosts(data)).catch(error => console.error('Error fetching posts:', error));\n  }, []);\n  const handleAddPost = () => {\n    addPost(title, content);\n    setTitle('');\n    setContent('');\n  };\n  const handleUpdatePost = () => {\n    updatePost(editId, title, content);\n    setTitle('');\n    setContent('');\n    setEditId(null);\n  };\n  const addPost = async (title, content) => {\n    const response = await fetch('/api/posts', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        title,\n        content\n      })\n    });\n    const newPost = await response.json();\n    setPosts([...posts, newPost]);\n  };\n  const updatePost = async (id, title, content) => {\n    const response = await fetch(`/api/posts/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        title,\n        content\n      })\n    });\n    const updatedPost = await response.json();\n    setPosts(posts.map(post => post.id === id ? updatedPost : post));\n  };\n  const deletePost = async id => {\n    await fetch(`/api/posts/${id}`, {\n      method: 'DELETE'\n    });\n    setPosts(posts.filter(post => post.id !== id));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: editId ? 'Update Post' : 'Add Post'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Title\",\n      value: title,\n      onChange: e => setTitle(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      placeholder: \"Content\",\n      value: content,\n      onChange: e => setContent(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: editId ? handleUpdatePost : handleAddPost,\n      children: editId ? 'Update' : 'Add'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(Posts, \"z2ia9CvqbAqbOyprHvD5j6H5t5M=\");\n_c = Posts;\nexport default Posts;\nvar _c;\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Posts","_s","posts","setPosts","title","setTitle","content","setContent","editId","setEditId","fetch","then","response","ok","Error","status","json","data","catch","error","console","handleAddPost","addPost","handleUpdatePost","updatePost","method","headers","body","JSON","stringify","newPost","id","updatedPost","map","post","deletePost","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/GongSite/frontend/src/Page/Posts.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nconst Posts = () => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [title, setTitle] = useState('');\r\n  const [content, setContent] = useState('');\r\n  const [editId, setEditId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch('/api/posts')\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(data => setPosts(data))\r\n      .catch(error => console.error('Error fetching posts:', error));\r\n  }, []);\r\n\r\n  const handleAddPost = () => {\r\n    addPost(title, content);\r\n    setTitle('');\r\n    setContent('');\r\n  };\r\n\r\n  const handleUpdatePost = () => {\r\n    updatePost(editId, title, content);\r\n    setTitle('');\r\n    setContent('');\r\n    setEditId(null);\r\n  };\r\n\r\n  const addPost = async (title, content) => {\r\n    const response = await fetch('/api/posts', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ title, content })\r\n    });\r\n    const newPost = await response.json();\r\n    setPosts([...posts, newPost]);\r\n  };\r\n\r\n  const updatePost = async (id, title, content) => {\r\n    const response = await fetch(`/api/posts/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ title, content })\r\n    });\r\n    const updatedPost = await response.json();\r\n    setPosts(posts.map(post => (post.id === id ? updatedPost : post)));\r\n  };\r\n\r\n  const deletePost = async (id) => {\r\n    await fetch(`/api/posts/${id}`, { method: 'DELETE' });\r\n    setPosts(posts.filter(post => post.id !== id));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Posts</h1>\r\n      {/* <ul>\r\n        {posts.map(post => (\r\n          <li key={post.id}>\r\n            <strong>{post.title}</strong> - {post.content}\r\n            <button onClick={() => {\r\n              setEditId(post.id);\r\n              setTitle(post.title);\r\n              setContent(post.content);\r\n            }}>\r\n              Edit\r\n            </button>\r\n            <button onClick={() => deletePost(post.id)}>Delete</button>\r\n          </li>\r\n        ))}\r\n      </ul> */}\r\n      <h2>{editId ? 'Update Post' : 'Add Post'}</h2>\r\n      <input \r\n        type=\"text\" \r\n        placeholder=\"Title\" \r\n        value={title}\r\n        onChange={e => setTitle(e.target.value)}\r\n      />\r\n      <textarea \r\n        placeholder=\"Content\" \r\n        value={content}\r\n        onChange={e => setContent(e.target.value)}\r\n      />\r\n      <button onClick={editId ? handleUpdatePost : handleAddPost}>\r\n        {editId ? 'Update' : 'Add'}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Posts;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}