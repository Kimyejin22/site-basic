{"ast":null,"code":"var _jsxFileName = \"C:\\\\GongSite\\\\frontend\\\\src\\\\Page\\\\RequestList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom'; // useNavigate를 통한 라우팅\nimport RequestStatusFilter from '../components/RequestList/RequestStatusFilter.js';\nimport ProductCategoryFilter from '../components/RequestList/ProductCategoryFilter.js';\nimport MaterialCategoryFilter from '../components/RequestList/MaterialCategoryFilter.js';\nimport RequestList from '../components/RequestList/RequestList.js';\nimport RequestDetailPage from './RequestDetailPage.js';\nimport '../Page/CSS/RequestDetail.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://api.bestimate.co.kr';\nconst RequestListPage = () => {\n  _s();\n  const [requests, setRequests] = useState([]);\n  const [filteredRequests, setFilteredRequests] = useState([]);\n  const [statusFilter, setStatusFilter] = useState('전체');\n  const [productCategoryFilter, setProductCategoryFilter] = useState('');\n  const [productSubcategoryFilter, setProductSubcategoryFilter] = useState('');\n  const [materialCategoryFilter, setMaterialCategoryFilter] = useState('');\n  const [materialSubcategoryFilter, setMaterialSubcategoryFilter] = useState('');\n  const [selectedRequest, setSelectedRequest] = useState(null); // 선택된 요청을 저장할 상태 추가\n\n  const navigate = useNavigate(); // 네비게이션 기능 추가\n\n  useEffect(() => {\n    // 서버에서 Request 데이터를 가져오는 함수\n    const fetchRequests = async () => {\n      try {\n        // 같은 도메인(포트 3000)에서 API 요청을 보냄\n        const response = await fetch(`${API_URL}/api/posts`); // 상대 경로 사용\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        setRequests(data);\n        setFilteredRequests(data);\n      } catch (err) {\n        console.error(\"Failed to fetch requests\", err); // 에러 메시지 출력\n      }\n    };\n    fetchRequests();\n  }, []);\n\n  // 필터가 변경될 때마다 필터링된 데이터를 업데이트하는 함수\n  useEffect(() => {\n    let updatedRequests = [...requests];\n    if (statusFilter !== '전체') {\n      updatedRequests = updatedRequests.filter(request => {\n        var _request$Step3Data;\n        const requestEndDate = new Date(request.createdAt);\n        requestEndDate.setDate(requestEndDate.getDate() + (((_request$Step3Data = request.Step3Data) === null || _request$Step3Data === void 0 ? void 0 : _request$Step3Data.recruitmentPeriod) || 0)); // 수정된 부분\n        return statusFilter === '모집중' ? requestEndDate >= new Date() : requestEndDate < new Date();\n      });\n    }\n    if (productCategoryFilter) {\n      updatedRequests = updatedRequests.filter(request => {\n        var _request$Step1Data;\n        return ((_request$Step1Data = request.Step1Data) === null || _request$Step1Data === void 0 ? void 0 : _request$Step1Data.selectedCategory) === productCategoryFilter;\n      } // 수정된 부분\n      );\n    }\n    if (productSubcategoryFilter) {\n      updatedRequests = updatedRequests.filter(request => {\n        var _request$Step1Data2;\n        return ((_request$Step1Data2 = request.Step1Data) === null || _request$Step1Data2 === void 0 ? void 0 : _request$Step1Data2.selectedSubcategory) === productSubcategoryFilter;\n      } // 수정된 부분\n      );\n    }\n    if (materialCategoryFilter) {\n      updatedRequests = updatedRequests.filter(request => {\n        var _request$Step2Data;\n        return ((_request$Step2Data = request.Step2Data) === null || _request$Step2Data === void 0 ? void 0 : _request$Step2Data.selectedCategory) === materialCategoryFilter;\n      } // 수정된 부분\n      );\n    }\n    if (materialSubcategoryFilter) {\n      updatedRequests = updatedRequests.filter(request => {\n        var _request$Step2Data2;\n        return ((_request$Step2Data2 = request.Step2Data) === null || _request$Step2Data2 === void 0 ? void 0 : _request$Step2Data2.selectedSubcategory) === materialSubcategoryFilter;\n      } // 수정된 부분\n      );\n    }\n    setFilteredRequests(updatedRequests);\n  }, [statusFilter, productCategoryFilter, productSubcategoryFilter, materialCategoryFilter, materialSubcategoryFilter, requests]);\n\n  // 요청 클릭 시 상세 페이지로 이동\n  const handleRequestClick = request => {\n    navigate(`/request/${request.id}`); // 클릭한 요청의 ID를 경로에 전달\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"request-list-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters\",\n      children: [/*#__PURE__*/_jsxDEV(RequestStatusFilter, {\n        setStatusFilter: setStatusFilter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ProductCategoryFilter, {\n        setProductCategoryFilter: setProductCategoryFilter,\n        setProductSubcategoryFilter: setProductSubcategoryFilter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MaterialCategoryFilter, {\n        setMaterialCategoryFilter: setMaterialCategoryFilter,\n        setMaterialSubcategoryFilter: setMaterialSubcategoryFilter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"request-list\",\n      children: [/*#__PURE__*/_jsxDEV(RequestList, {\n        requests: filteredRequests,\n        onRequestClick: handleRequestClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(RequestListPage, \"ow+L/aYFe76lkmb8xjY+DZF2Rss=\", false, function () {\n  return [useNavigate];\n});\n_c = RequestListPage;\nexport default RequestListPage;\nvar _c;\n$RefreshReg$(_c, \"RequestListPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","RequestStatusFilter","ProductCategoryFilter","MaterialCategoryFilter","RequestList","RequestDetailPage","jsxDEV","_jsxDEV","API_URL","RequestListPage","_s","requests","setRequests","filteredRequests","setFilteredRequests","statusFilter","setStatusFilter","productCategoryFilter","setProductCategoryFilter","productSubcategoryFilter","setProductSubcategoryFilter","materialCategoryFilter","setMaterialCategoryFilter","materialSubcategoryFilter","setMaterialSubcategoryFilter","selectedRequest","setSelectedRequest","navigate","fetchRequests","response","fetch","ok","Error","status","data","json","err","console","error","updatedRequests","filter","request","_request$Step3Data","requestEndDate","Date","createdAt","setDate","getDate","Step3Data","recruitmentPeriod","_request$Step1Data","Step1Data","selectedCategory","_request$Step1Data2","selectedSubcategory","_request$Step2Data","Step2Data","_request$Step2Data2","handleRequestClick","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onRequestClick","_c","$RefreshReg$"],"sources":["C:/GongSite/frontend/src/Page/RequestList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom'; // useNavigate를 통한 라우팅\r\nimport RequestStatusFilter from '../components/RequestList/RequestStatusFilter.js';\r\nimport ProductCategoryFilter from '../components/RequestList/ProductCategoryFilter.js';\r\nimport MaterialCategoryFilter from '../components/RequestList/MaterialCategoryFilter.js';\r\nimport RequestList from '../components/RequestList/RequestList.js';\r\nimport RequestDetailPage from './RequestDetailPage.js';\r\nimport '../Page/CSS/RequestDetail.css';\r\n\r\nconst API_URL = 'http://api.bestimate.co.kr';\r\n\r\nconst RequestListPage = () => {\r\n  const [requests, setRequests] = useState([]);\r\n  const [filteredRequests, setFilteredRequests] = useState([]);\r\n  const [statusFilter, setStatusFilter] = useState('전체');\r\n  const [productCategoryFilter, setProductCategoryFilter] = useState('');\r\n  const [productSubcategoryFilter, setProductSubcategoryFilter] = useState('');\r\n  const [materialCategoryFilter, setMaterialCategoryFilter] = useState('');\r\n  const [materialSubcategoryFilter, setMaterialSubcategoryFilter] = useState('');\r\n  const [selectedRequest, setSelectedRequest] = useState(null); // 선택된 요청을 저장할 상태 추가\r\n\r\n  const navigate = useNavigate(); // 네비게이션 기능 추가\r\n\r\n  useEffect(() => {\r\n    // 서버에서 Request 데이터를 가져오는 함수\r\n    const fetchRequests = async () => {\r\n      try {\r\n        // 같은 도메인(포트 3000)에서 API 요청을 보냄\r\n        const response = await fetch(`${API_URL}/api/posts`); // 상대 경로 사용\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n        const data = await response.json();\r\n        setRequests(data);\r\n        setFilteredRequests(data);\r\n      } catch (err) {\r\n        console.error(\"Failed to fetch requests\", err); // 에러 메시지 출력\r\n      }\r\n    };\r\n\r\n    fetchRequests();\r\n  }, []);\r\n\r\n  // 필터가 변경될 때마다 필터링된 데이터를 업데이트하는 함수\r\n  useEffect(() => {\r\n    let updatedRequests = [...requests];\r\n\r\n    if (statusFilter !== '전체') {\r\n      updatedRequests = updatedRequests.filter(request => {\r\n        const requestEndDate = new Date(request.createdAt);\r\n        requestEndDate.setDate(requestEndDate.getDate() + (request.Step3Data?.recruitmentPeriod || 0)); // 수정된 부분\r\n        return statusFilter === '모집중'\r\n          ? requestEndDate >= new Date()\r\n          : requestEndDate < new Date();\r\n      });\r\n    }\r\n\r\n    if (productCategoryFilter) {\r\n      updatedRequests = updatedRequests.filter(\r\n        request => request.Step1Data?.selectedCategory === productCategoryFilter // 수정된 부분\r\n      );\r\n    }\r\n\r\n    if (productSubcategoryFilter) {\r\n      updatedRequests = updatedRequests.filter(\r\n        request => request.Step1Data?.selectedSubcategory === productSubcategoryFilter // 수정된 부분\r\n      );\r\n    }\r\n\r\n    if (materialCategoryFilter) {\r\n      updatedRequests = updatedRequests.filter(\r\n        request => request.Step2Data?.selectedCategory === materialCategoryFilter // 수정된 부분\r\n      );\r\n    }\r\n\r\n    if (materialSubcategoryFilter) {\r\n      updatedRequests = updatedRequests.filter(\r\n        request => request.Step2Data?.selectedSubcategory === materialSubcategoryFilter // 수정된 부분\r\n      );\r\n    }\r\n\r\n    setFilteredRequests(updatedRequests);\r\n  }, [statusFilter, productCategoryFilter, productSubcategoryFilter, materialCategoryFilter, materialSubcategoryFilter, requests]);\r\n\r\n  // 요청 클릭 시 상세 페이지로 이동\r\n  const handleRequestClick = (request) => {\r\n    navigate(`/request/${request.id}`); // 클릭한 요청의 ID를 경로에 전달\r\n  };\r\n\r\n  return (\r\n    <div className=\"request-list-page\">\r\n      <div className=\"filters\">\r\n        <RequestStatusFilter setStatusFilter={setStatusFilter} />\r\n        <ProductCategoryFilter\r\n          setProductCategoryFilter={setProductCategoryFilter}\r\n          setProductSubcategoryFilter={setProductSubcategoryFilter}\r\n        />\r\n        <MaterialCategoryFilter\r\n          setMaterialCategoryFilter={setMaterialCategoryFilter}\r\n          setMaterialSubcategoryFilter={setMaterialSubcategoryFilter}\r\n        />\r\n      </div>\r\n      <div className=\"request-list\">\r\n        <RequestList requests={filteredRequests} onRequestClick={handleRequestClick} /> {/* 클릭 핸들러 전달 */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequestListPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}