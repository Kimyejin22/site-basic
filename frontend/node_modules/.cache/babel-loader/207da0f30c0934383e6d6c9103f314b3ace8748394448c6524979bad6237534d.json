{"ast":null,"code":"var _jsxFileName = \"C:\\\\GongSite\\\\frontend\\\\src\\\\components\\\\RequestDetail\\\\EstimateForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EstimateForm = ({\n  request\n}) => {\n  _s();\n  const [quantities, setQuantities] = useState([]);\n  const [prices, setPrices] = useState([]);\n  const [message, setMessage] = useState(''); // 서버 응답 메시지\n\n  // 수량/단가 추가 버튼 클릭 시\n  const handleAddRow = () => {\n    setQuantities([...quantities, '']);\n    setPrices([...prices, '']);\n  };\n\n  // 수량 입력 변경 핸들러\n  const handleQuantityChange = (index, value) => {\n    const updatedQuantities = [...quantities];\n    updatedQuantities[index] = value;\n    setQuantities(updatedQuantities);\n  };\n\n  // 단가 입력 변경 핸들러\n  const handlePriceChange = (index, value) => {\n    const updatedPrices = [...prices];\n    updatedPrices[index] = value;\n    setPrices(updatedPrices);\n  };\n\n  // 서버에 데이터 전송 (견적 제출)\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    // 수량과 가격 배열을 각각 확인하여 비어있지 않은지 체크\n    if (quantities.some(q => q === '') || prices.some(p => p === '')) {\n      setMessage('모든 수량과 단가를 입력해주세요.');\n      return;\n    }\n    const estimateData = {\n      postId: request.id,\n      // 요청 ID\n      userId: 1,\n      // 현재 로그인한 사용자의 ID (수정 필요)\n      quantities,\n      prices\n    };\n    try {\n      const response = await fetch('/api/estimates', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(estimateData) // JSON 형식으로 데이터 전송\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setMessage('견적이 성공적으로 제출되었습니다.');\n        console.log('서버 응답:', data); // 서버 응답 확인\n      } else {\n        const errorData = await response.json();\n        setMessage(`견적 제출 실패: ${errorData.error}`);\n        console.error('견적 제출 실패:', errorData);\n      }\n    } catch (err) {\n      console.error('서버 오류:', err);\n      setMessage('서버 오류가 발생했습니다.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"estimate-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\uACAC\\uC801 \\uC81C\\uC548\\uD558\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), quantities.map((quantity, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"estimate-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: quantity,\n        onChange: e => handleQuantityChange(index, e.target.value),\n        placeholder: \"\\uC218\\uB7C9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: prices[index],\n        onChange: e => handlePriceChange(index, e.target.value),\n        placeholder: \"\\uB2E8\\uAC00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleAddRow,\n      children: \"\\uC218\\uB7C9/\\uB2E8\\uAC00 \\uCD94\\uAC00\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"\\uACAC\\uC801 \\uBCF4\\uB0B4\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(EstimateForm, \"XK3Tjlv2XyGmdrhQvIJHIG7SPe8=\");\n_c = EstimateForm;\nexport default EstimateForm;\nvar _c;\n$RefreshReg$(_c, \"EstimateForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","EstimateForm","request","_s","quantities","setQuantities","prices","setPrices","message","setMessage","handleAddRow","handleQuantityChange","index","value","updatedQuantities","handlePriceChange","updatedPrices","handleSubmit","event","preventDefault","some","q","p","estimateData","postId","id","userId","response","fetch","method","headers","body","JSON","stringify","ok","data","json","console","log","errorData","error","err","onSubmit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","quantity","type","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/GongSite/frontend/src/components/RequestDetail/EstimateForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst EstimateForm = ({ request }) => {\r\n  const [quantities, setQuantities] = useState([]);\r\n  const [prices, setPrices] = useState([]);\r\n  const [message, setMessage] = useState(''); // 서버 응답 메시지\r\n\r\n  // 수량/단가 추가 버튼 클릭 시\r\n  const handleAddRow = () => {\r\n    setQuantities([...quantities, '']);\r\n    setPrices([...prices, '']);\r\n  };\r\n\r\n  // 수량 입력 변경 핸들러\r\n  const handleQuantityChange = (index, value) => {\r\n    const updatedQuantities = [...quantities];\r\n    updatedQuantities[index] = value;\r\n    setQuantities(updatedQuantities);\r\n  };\r\n\r\n  // 단가 입력 변경 핸들러\r\n  const handlePriceChange = (index, value) => {\r\n    const updatedPrices = [...prices];\r\n    updatedPrices[index] = value;\r\n    setPrices(updatedPrices);\r\n  };\r\n\r\n  // 서버에 데이터 전송 (견적 제출)\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // 수량과 가격 배열을 각각 확인하여 비어있지 않은지 체크\r\n    if (quantities.some(q => q === '') || prices.some(p => p === '')) {\r\n      setMessage('모든 수량과 단가를 입력해주세요.');\r\n      return;\r\n    }\r\n\r\n    const estimateData = {\r\n      postId: request.id, // 요청 ID\r\n      userId: 1,          // 현재 로그인한 사용자의 ID (수정 필요)\r\n      quantities,\r\n      prices\r\n    };\r\n\r\n    try {\r\n      const response = await fetch('/api/estimates', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(estimateData), // JSON 형식으로 데이터 전송\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setMessage('견적이 성공적으로 제출되었습니다.');\r\n        console.log('서버 응답:', data); // 서버 응답 확인\r\n      } else {\r\n        const errorData = await response.json();\r\n        setMessage(`견적 제출 실패: ${errorData.error}`);\r\n        console.error('견적 제출 실패:', errorData);\r\n      }\r\n    } catch (err) {\r\n      console.error('서버 오류:', err);\r\n      setMessage('서버 오류가 발생했습니다.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"estimate-form\">\r\n      <h3>견적 제안하기</h3>\r\n      {quantities.map((quantity, index) => (\r\n        <div key={index} className=\"estimate-row\">\r\n          <input\r\n            type=\"number\"\r\n            value={quantity}\r\n            onChange={(e) => handleQuantityChange(index, e.target.value)}\r\n            placeholder=\"수량\"\r\n          />\r\n          <input\r\n            type=\"number\"\r\n            value={prices[index]}\r\n            onChange={(e) => handlePriceChange(index, e.target.value)}\r\n            placeholder=\"단가\"\r\n          />\r\n        </div>\r\n      ))}\r\n      <button type=\"button\" onClick={handleAddRow}>\r\n        수량/단가 추가\r\n      </button>\r\n      <button type=\"submit\">견적 보내기</button>\r\n      {/* 서버 응답 메시지 표시 */}\r\n      {message && <p>{message}</p>}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default EstimateForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}